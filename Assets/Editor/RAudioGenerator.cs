#if UNITY_EDITOR
using UnityEngine;
using UnityEditor;
using System.IO;
using System.Text;
using System.Linq;

public static class RAudioGenerator
{
    private const string ResourcesPath = "Assets/Resources/Audio";
    private const string ScriptPath = "Assets/Resources/R.Audio.generated.cs";

    [MenuItem("Tools/Generate Audio References")]
    public static void Generate()
    {
        if (!Directory.Exists(ResourcesPath))
        {
            Debug.LogError($"Directory not found: {ResourcesPath}");
            return;
        }

        var audioFiles = Directory.GetFiles(ResourcesPath, "*.*", SearchOption.AllDirectories)
            .Where(file => file.EndsWith(".wav") || file.EndsWith(".mp3"))
            .ToArray();

        var sb = new StringBuilder();

        sb.AppendLine("// Auto-generated by RAudioGenerator");
        sb.AppendLine("using UnityEngine;");
        sb.AppendLine();
        sb.AppendLine("public static partial class R");
        sb.AppendLine("{");
        sb.AppendLine("    public static class Audio");
        sb.AppendLine("    {");

        foreach (var file in audioFiles)
        {
            string fileName = Path.GetFileNameWithoutExtension(file);
            sb.AppendLine($"        public static AudioClip {SanitizeName(fileName)};");
        }

        sb.AppendLine("    }");
        sb.AppendLine();
        sb.AppendLine("    public static void InitAudio()");
        sb.AppendLine("    {");

        foreach (var file in audioFiles)
        {
            string fileName = Path.GetFileNameWithoutExtension(file);
            string resourcePath = GetUnityResourcePath(file);
            sb.AppendLine($"        Audio.{SanitizeName(fileName)} = Resources.Load<AudioClip>(\"{resourcePath}\");");
        }

        sb.AppendLine("    }");
        sb.AppendLine("}");

        File.WriteAllText(ScriptPath, sb.ToString());
        AssetDatabase.Refresh();
        Debug.Log($"Generated {audioFiles.Length} audio references in {ScriptPath}");
    }

    private static string GetUnityResourcePath(string fullPath)
    {
        int resourcesIndex = fullPath.IndexOf("Resources/") + 10;
        string path = fullPath.Substring(resourcesIndex)
            .Replace("\\", "/") // Заменяем обратные слеши
            .Replace(Path.GetExtension(fullPath), "");
        return path;
    }

    private static string SanitizeName(string name)
    {
        return name.Replace(" ", "_").Replace("-", "_");
    }
}
#endif